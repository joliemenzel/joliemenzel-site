---
layout: layout.njk
permalink: "tagged/contact/index.html"
title: "Contact"
---

<div class="page-body" id="contact-page">
  <h1>Contact</h1>
  <p>Have a project, opportunity, or question? Send a note below.</p>

  <!-- Cloudflare Turnstile auto-render -->
  <script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>

  <!-- Hidden iframe target for GAS (prevents page navigation) -->
  <iframe name="gasShim" id="gasShim" style="display:none;" aria-hidden="true"></iframe>

  <form id="contactForm"
        class="contact-form"
        action="https://script.google.com/macros/s/AKfycbylBbG38WFk77DUisMS70fEY2v_Unkigp_yu6Dj0gxhTPZbjAY_ndYJ1To17X2HfF0sVQ/exec"
        method="POST"
        target="gasShim"
        novalidate>
    <!-- Honeypot -->
    <div style="position:absolute; left:-9999px; opacity:0;">
      <label>Leave this blank
        <input type="text" name="_gotcha" autocomplete="off" tabindex="-1">
      </label>
    </div>

    <div class="field">
      <label for="name">Name <span aria-hidden="true">*</span></label>
      <input id="name" name="name" type="text" required autocomplete="name">
    </div>

    <div class="field">
      <label for="email">Email <span aria-hidden="true">*</span></label>
      <input id="email" name="email" type="text" required autocomplete="email" inputmode="email">
    </div>

    <div class="field">
      <label for="message">Message <span aria-hidden="true">*</span></label>
      <textarea id="message" name="message" rows="6" required></textarea>
    </div>

    <!-- Turnstile widget -->
    <div id="captchaWrap" class="field">
      <div class="cf-turnstile"
           data-sitekey="0x4AAAAAAB5MKNBoSZ0fhmm_"
           data-callback="cfSolved"
           data-expired-callback="cfExpired"
           data-error-callback="cfError"></div>
      <small id="captchaHint" class="hint">Please verify you’re human to enable “Send”.</small>
    </div>

    <!-- Status lives BETWEEN captcha and button -->
    <div id="formStatus" class="status" aria-live="polite" hidden></div>

    <!-- Hidden context for GAS -->
    <input type="hidden" name="page" id="page">
    <input type="hidden" name="postback_origin" id="postback_origin">
    <input type="hidden" name="postback_token" id="postback_token">

    <button id="sendBtn" class="btn btn-outline" type="submit" disabled>Send Message</button>
  </form>
</div>

<script>
  const form  = document.getElementById('contactForm');
  const btn   = document.getElementById('sendBtn');
  const hint  = document.getElementById('captchaHint');
  const statusBox = document.getElementById('formStatus');

  // Turnstile enable/disable UX
  window.cfSolved  = function(){ btn.disabled = false; hint.textContent = 'Great—captcha verified.'; };
  window.cfExpired = function(){ btn.disabled = true;  hint.textContent = 'Captcha expired—please re-check the box.'; };
  window.cfError   = function(){ btn.disabled = true;  hint.textContent = 'Captcha error—please reload the page and try again.'; };

  // Set static context on load
  document.getElementById('page').value = location.href;
  document.getElementById('postback_origin').value = location.origin;

  // One-time nonce per submission
  function setNonce() {
    const tokEl = document.getElementById('postback_token');
    const v = (crypto && crypto.randomUUID) ? crypto.randomUUID()
            : (Date.now() + '-' + Math.random().toString(36).slice(2));
    tokEl.value = v;
    return v;
  }

  // Friendly validity messages
  (function () {
    const nameEl = document.getElementById('name');
    const emailEl = document.getElementById('email');
    const messageEl = document.getElementById('message');
    function clearCustom(e){ e.target.setCustomValidity(''); }

    nameEl.addEventListener('invalid', () => {
      if (nameEl.validity.valueMissing) nameEl.setCustomValidity('Please add your name.');
    });
    nameEl.addEventListener('input', clearCustom);

    emailEl.addEventListener('invalid', () => {
      if (emailEl.validity.valueMissing) {
        emailEl.setCustomValidity('Please add your email.');
      } else if (!/.+@.+\..+/.test(emailEl.value)) {
        emailEl.setCustomValidity('Please include an “@” and a dot in your email.');
      }
    });
    emailEl.addEventListener('input', clearCustom);

    messageEl.addEventListener('invalid', () => {
      if (messageEl.validity.valueMissing) messageEl.setCustomValidity('Please add a short message.');
    });
    messageEl.addEventListener('input', clearCustom);
  })();

  // Submit handler: POSTs to hidden iframe (no navigation)
  form.addEventListener('submit', (e) => {
    if (!form.checkValidity()) { e.preventDefault(); form.reportValidity(); return; }
    if (btn.disabled) { e.preventDefault(); hint.textContent = 'Please complete the captcha to send your message.'; return; }

    // assign nonce for this request
    setNonce();

    statusBox.hidden = false;
    statusBox.textContent = 'Sending…';
    statusBox.className = 'status sending';
    btn.disabled = true;

    // Arm a fallback so we never get stuck visually
    clearTimeout(window.__contactFallback);
    window.__contactFallback = setTimeout(() => {
      if (statusBox.classList.contains('sending')) {
        statusBox.textContent = 'Thanks! If you don’t hear back, feel free to email me directly.';
        statusBox.className = 'status ok';
        // keep button disabled until captcha is solved again
      }
    }, 5000);
  });

  // Listen for GAS iframe postMessage using nonce verification
  window.addEventListener('message', (event) => {
    // Accept messages only from Google Apps Script wrapper domains
    const o = String(event.origin || '');
    const isGoogle = /(^https:\/\/script\.google\.com$)|(\.googleusercontent\.com$)|(\.google\.com$)/.test(o);
    if (!isGoogle) return;

    const data = event.data || {};
    if (typeof data.ok !== 'boolean') return;

    // verify the one-time token
    const expected = document.getElementById('postback_token').value;
    if (!expected || data.token !== expected) return;

    clearTimeout(window.__contactFallback);

    if (data.ok) {
      form.reset();
      if (window.turnstile) { try { turnstile.reset(); } catch(_){} }
      hint.textContent = 'Please verify you’re human to enable “Send”.';
      statusBox.textContent = 'Thanks! Your message has been sent.';
      statusBox.className = 'status ok';
      btn.disabled = true; // require re-solve
    } else {
      const reason = (Array.isArray(data.errors) && data.errors[0]) || 'Submission failed. Please try again.';
      statusBox.textContent = reason;
      statusBox.className = 'status err';
      btn.disabled = false;
    }
  });
</script>

<style>
.contact-form{ max-width: 720px; }
.field{ margin: 12px 0; display: grid; gap: 6px; }
.field input, .field textarea{
  width: 100%; padding: 10px 12px; font: inherit; background: #fff;
  border: 1px solid var(--smallBorders); border-radius: 6px;
}
#captchaWrap{ margin-top: 12px; }
#sendBtn[disabled]{ opacity: .6; cursor: not-allowed; }

.status{
  margin: 12px 0 16px;
  padding: 10px 12px; border-radius: 6px; background: rgba(0,0,0,.04);
}
.status.sending{ background: rgba(0,0,0,.06); }
.status.ok{ background: rgba(0,150,0,.10); }
.status.err{ background: rgba(200,0,0,.10); }
.hint{ display: block; font-size: .9em; color: var(--smallMuted, #666); margin-top: 6px; }
</style>
