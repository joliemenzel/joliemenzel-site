<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <title>{{ title or site.title }}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>

  {% if site.description %}<meta name="description" content="{{ site.description }}"/>{% endif %}
  {% if site.favicon %}<link rel="icon" href="{{ site.favicon }}">{% endif %}

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@600&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Playfair+Display:ital,wght@0,700;1,400&display=swap" rel="stylesheet">

  <!-- Site CSS -->
  <link rel="stylesheet" href="{{ '/assets/css/site.css' | url }}">

  <!-- Theme values from site.json -->
  <style>
    :root{
      /* palette */
      --red:  #a71f21;
      --pink: #E8B5BE;
      --black:#1E1E1C;
      --lg:   #EBEBEB;
      --mg:   #888C8C;

      /* map to your existing site.json-driven vars */
      --accent: {{ site.colors.accent }};
      --text:   {{ site.colors.text }};
      --link:   {{ site.colors.link }};
      --bg:     {{ site.colors.bg }};
      --thumbBg:{{ site.colors.thumbBg }};
      --hoverLink: {{ site.colors.hoverLink }};
      --borders:   {{ site.colors.borders }};
      --smallBorders: {{ site.colors.smallBorders }};

      /* fonts */
      --font-sans: "Inter", system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
      --font-serif:"Playfair Display", Georgia, serif;
      --font: var(--font-sans); /* body default */
    }
  </style>
</head>

<body>
  <!-- Full-bleed sticky ribbon -->
  <header class="navbar">
    <!-- Left-pinned logo -->
    {% if site.header.image %}
      <a class="brand brand--logo" href="{{ '/' | url }}">
        <img class="brand-image" src="{{ site.header.image }}" alt="{{ site.title }}">
      </a>
    {% else %}
      <a class="brand brand--logo" href="{{ '/' | url }}">JM</a>
    {% endif %}

    <!-- Centered title + links -->
    <div class="inner">
      <div class="brand brand--text">{{ site.title }}</div>
      <nav class="navlinks">
        {% for item in site.nav %}
          <a href="{{ item.href | url }}">{{ item.label }}</a>
        {% endfor %}
      </nav>
    </div>
  </header>

  <!-- Centered page content -->
  <main id="container">
    {{ content | safe }}
  </main>

  <footer class="footer">
    <div class="inner">
      <a href="{{ '/' | url }}">Home</a>
    </div>
  </footer>

  <script>
    (function(){
      var last = -1;
      function onScroll(){
        var s = window.scrollY || window.pageYOffset || 0;
        if ((s>10) !== document.body.classList.contains('scrolled')){
          document.body.classList.toggle('scrolled', s>10);
        }
      }
      window.addEventListener('scroll', onScroll, {passive:true});
      onScroll();
    })();
  </script>

  <div id="jm-modal" class="jm-modal" aria-hidden="true">
    <div class="jm-modal__backdrop" data-close="true">
    </div>
    <div class="jm-modal__frame" role="dialog" aria-modal="true" aria-label="Preview">
      <button class="jm-modal__close" type="button" aria-label="Close" data-close="true">✕
      </button>
      <div class="jm-modal__content" id="jm-modal-content">
      </div>
    </div>
  </div>

  <script>
  (() => {
    const modalRoot   = document.getElementById('jm-modal');
    const contentWrap = document.getElementById('jm-modal-content');
    const openClass   = 'is-open';
    const noScroll    = 'jm-no-scroll';

    const closeModal = () => {
      modalRoot.classList.remove(openClass);
      document.body.classList.remove(noScroll);
      modalRoot.setAttribute('aria-hidden', 'true');

      contentWrap.className = 'jm-modal__content';
      contentWrap.innerHTML = '';
    };
    modalRoot.addEventListener('click', (e) => {
      if (e.target.matches('[data-close], .jm-modal__backdrop')) closeModal();
    });
    window.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modalRoot.classList.contains(openClass)) closeModal();
    });

    const openModal = () => {
      modalRoot.classList.add(openClass);
      document.body.classList.add(noScroll);
      modalRoot.setAttribute('aria-hidden', 'false');
    };

    const loadPostIntoModal = async (url) => {
      contentWrap.classList.add('jm-modal__content--post');
      contentWrap.innerHTML = '<div>Loading…</div>';

      try {
        const res  = await fetch(url, { credentials: 'same-origin' });
        const html = await res.text();
        const doc  = new DOMParser().parseFromString(html, 'text/html');

        const body = doc.querySelector('.post-body') || doc.querySelector('#container') || doc.body;

        contentWrap.innerHTML = body.innerHTML;

      } catch (err) {
        contentWrap.innerHTML = `<p>Sorry—couldn’t load that post.</p>`;
        console.error(err);
      }
    };

    const loadImageIntoModal = (src, alt = '') => {
      contentWrap.classList.add('jm-modal__content--image');
      contentWrap.innerHTML = '';
      const img = new Image();
      img.alt = alt || '';
      img.decoding = 'async';
      img.loading  = 'eager';
      img.src = src;
      contentWrap.appendChild(img);
    };

    document.addEventListener('click', (e) => {
      const a = e.target.closest('a[data-popup]');
      if (!a) return;

      const type = a.getAttribute('data-popup');   // "post" | "image"
      const href = a.getAttribute('href');

      if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey || a.target === '_blank') return;

      if (type === 'post') {
        e.preventDefault();
        openModal();
        loadPostIntoModal(href);
      } else if (type === 'image') {
        e.preventDefault();
        openModal();
        const alt = (a.querySelector('img') && a.querySelector('img').alt) || a.getAttribute('data-alt') || '';
        loadImageIntoModal(href, alt);
      }
    });
  })();
  </script>

</body>
</html>
