<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <title>{{ title or site.title }}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>

  {% if site.description %}<meta name="description" content="{{ site.description }}"/>{% endif %}
  {% if site.favicon %}<link rel="icon" href="{{ site.favicon }}">{% endif %}

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@600&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Playfair+Display:ital,wght@0,700;1,400&display=swap" rel="stylesheet">

  <!-- Site CSS -->
  <link rel="stylesheet" href="{{ '/assets/css/site.css' | url }}">

  <!-- Theme values from site.json -->
  <style>
    :root{
      /* palette */
      --red:  #a71f21;
      --pink: #E8B5BE;
      --black:#1E1E1C;
      --lg:   #EBEBEB;
      --mg:   #888C8C;

      /* map to your existing site.json-driven vars */
      --accent: {{ site.colors.accent }};
      --text:   {{ site.colors.text }};
      --link:   {{ site.colors.link }};
      --bg:     {{ site.colors.bg }};
      --thumbBg:{{ site.colors.thumbBg }};
      --hoverLink: {{ site.colors.hoverLink }};
      --borders:   {{ site.colors.borders }};
      --smallBorders: {{ site.colors.smallBorders }};

      /* fonts */
      --font-sans: "Inter", system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
      --font-serif:"Playfair Display", Georgia, serif;
      --font: var(--font-sans); /* body default */
    }
  </style>
</head>

<body>
  <!-- Full-bleed sticky ribbon -->
  <header class="navbar">
    <!-- Left-pinned logo -->
    {% if site.header.image %}
      <a class="brand brand--logo" href="{{ '/' | url }}">
        <img class="brand-image" src="{{ site.header.image }}" alt="{{ site.title }}">
      </a>
    {% else %}
      <a class="brand brand--logo" href="{{ '/' | url }}">JM</a>
    {% endif %}

    <!-- Centered title + links -->
    <div class="inner">
      <div class="brand brand--text">{{ site.title }}</div>
      <nav class="navlinks">
        {% for item in site.nav %}
          <a href="{{ item.href | url }}">{{ item.label }}</a>
        {% endfor %}
      </nav>
    </div>
  </header>

  <!-- Centered page content -->
  <main id="container">
    {{ content | safe }}
  </main>

  <footer class="footer">
    <div class="inner">
      <a href="{{ '/' | url }}">Home</a>
    </div>
  </footer>

  <script>
    (function(){
      var last = -1;
      function onScroll(){
        var s = window.scrollY || window.pageYOffset || 0;
        if ((s>10) !== document.body.classList.contains('scrolled')){
          document.body.classList.toggle('scrolled', s>10);
        }
      }
      window.addEventListener('scroll', onScroll, {passive:true});
      onScroll();
    })();
  </script>

  <div id="jm-modal" class="jm-modal" aria-hidden="true">
    <div class="jm-modal__backdrop" data-close="true"></div>
    <div class="jm-modal__frame" role="dialog" aria-modal="true" aria-label="Preview">
      <button class="jm-modal__close" type="button" aria-label="Close" data-close="true">✕</button>
      <button class="jm-modal__nav jm-modal__prev" type="button" aria-label="Previous" data-prev>&lsaquo;</button>
      <button class="jm-modal__nav jm-modal__next" type="button" aria-label="Next" data-next>&rsaquo;</button>
      <div class="jm-modal__content" id="jm-modal-content"></div>
    </div>
  </div>

  <script>
    (() => {
      const modalRoot   = document.getElementById('jm-modal');
      const contentWrap = document.getElementById('jm-modal-content');
      const btnPrev     = modalRoot.querySelector('[data-prev]');
      const btnNext     = modalRoot.querySelector('[data-next]');
      const openClass   = 'is-open';
      const imgClass    = 'is-image';
      const noScroll    = 'jm-no-scroll';

      // --- gallery state ---
      let gallery = { items: [], index: -1 }; // items: [{href, alt}], index of current

      const resetGallery = () => { gallery = { items: [], index: -1 }; };

      // --- close/open ---
      const closeModal = () => {
        modalRoot.classList.remove(openClass, imgClass);
        document.body.classList.remove(noScroll);
        modalRoot.setAttribute('aria-hidden', 'true');
        contentWrap.className = 'jm-modal__content';
        contentWrap.innerHTML = '';
        resetGallery();
      };

      const openModal = (isImage=false) => {
        modalRoot.classList.add(openClass);
        if (isImage) modalRoot.classList.add(imgClass);
        document.body.classList.add(noScroll);
        modalRoot.setAttribute('aria-hidden', 'false');
      };

      // --- loaders ---
      const showImageAt = (idx) => {
        if (!gallery.items.length) return;
        if (idx < 0) idx = gallery.items.length - 1;
        if (idx >= gallery.items.length) idx = 0;
        gallery.index = idx;

        const { href, alt } = gallery.items[idx];
        contentWrap.className = 'jm-modal__content jm-modal__content--image';
        contentWrap.innerHTML = '';
        const img = new Image();
        img.alt = alt || '';
        img.decoding = 'async';
        img.loading  = 'eager';
        img.src = href;
        contentWrap.appendChild(img);

        // (optional) preload neighbors
        const pre = new Image(); pre.src = gallery.items[(idx+1)%gallery.items.length].href;
        const pre2 = new Image(); pre2.src = gallery.items[(idx-1+gallery.items.length)%gallery.items.length].href;
      };

      const loadPostIntoModal = async (url) => {
        contentWrap.className = 'jm-modal__content jm-modal__content--post';
        contentWrap.innerHTML = '<div>Loading…</div>';
        try {
          const res  = await fetch(url, { credentials: 'same-origin' });
          const html = await res.text();
          const doc  = new DOMParser().parseFromString(html, 'text/html');
          const body = doc.querySelector('.post-body') || doc.querySelector('#container') || doc.body;
          contentWrap.innerHTML = body.innerHTML;
        } catch (err) {
          contentWrap.innerHTML = `<p>Sorry—couldn’t load that post.</p>`;
          console.error(err);
        }
      };

      // --- events: close/backdrop/esc ---
      modalRoot.addEventListener('click', (e) => {
        if (e.target.matches('[data-close], .jm-modal__backdrop')) closeModal();
      });
      window.addEventListener('keydown', (e) => {
        if (!modalRoot.classList.contains(openClass)) return;
        if (e.key === 'Escape') closeModal();
        if (modalRoot.classList.contains(imgClass)) {
          if (e.key === 'ArrowRight') { e.preventDefault(); showImageAt(gallery.index + 1); }
          if (e.key === 'ArrowLeft')  { e.preventDefault(); showImageAt(gallery.index - 1); }
        }
      });

      // --- nav buttons ---
      btnPrev.addEventListener('click', () => showImageAt(gallery.index - 1));
      btnNext.addEventListener('click', () => showImageAt(gallery.index + 1));

      // --- touch swipe (basic) ---
      let touchX = null;
      contentWrap.addEventListener('touchstart', (e) => { touchX = e.touches[0].clientX; }, {passive:true});
      contentWrap.addEventListener('touchend',   (e) => {
        if (touchX == null) return;
        const dx = e.changedTouches[0].clientX - touchX;
        if (Math.abs(dx) > 40 && modalRoot.classList.contains(imgClass)) {
          if (dx < 0) showImageAt(gallery.index + 1); else showImageAt(gallery.index - 1);
        }
        touchX = null;
      });

      // --- click delegation: open image/post ---
      document.addEventListener('click', (e) => {
        const a = e.target.closest('a[data-popup]');
        if (!a) return;

        const type = a.getAttribute('data-popup');   // "post" | "image"
        const href = a.getAttribute('href');

        // Don't hijack modified clicks
        if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey || a.target === '_blank') return;

        if (type === 'post') {
          e.preventDefault();
          openModal(false);
          resetGallery();                 // gallery not used for post view
          loadPostIntoModal(href);
          return;
          }

        if (type === 'image') {
          e.preventDefault();

          const postBody = a.closest('.post-body') || document;
          const links = Array.from(postBody.querySelectorAll('a[data-popup="image"]'));

          gallery.items = links.map(link => ({
            href: link.getAttribute('href'),
            alt: (link.querySelector('img') && link.querySelector('img').alt) || link.getAttribute('data-alt') || ''
          }));

          gallery.index = Math.max(0, links.indexOf(a));

          openModal(true);
          showImageAt(gallery.index);
        }
      });
    })();
    </script>


</body>
</html>
